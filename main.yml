---
- name: Play - Setup Jenkins Server
  hosts: all
  vars_files:
    - ./vars/vars.yml
    - ./vars/secrets.yml
  become: true

  pre_tasks:
    - debug: var=ansible_os_family
    - name: Load OS specific Vars file
      include_vars: "{{ item }}"
      with_first_found:
        - "./vars/os_specific_{{ ansible_os_family }}.yml"
        - "./vars/os_specific_default.yml"

    - name: Gather the installed package facts
      ansible.builtin.package_facts:
        manager: auto      
      when: ansible_os_family == "RedHat"

    - name: Stop and disable Firewalld service
      service:
        name: firewalld
        state: stopped
        enabled: false
      when: ansible_os_family == "RedHat" and "'firewalld' in ansible_facts.packages"

    - name: Install Jenkins-Host-System packages
      package:
        name:
          - git
          - gpg
          - jq
          - python3-jmespath
        state: present
      become: true

    - name: Add Hashicorp key downloaded from URL to Hashicorp Keyring
      ansible.builtin.apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        keyring: /usr/share/keyrings/hashicorp-archive-keyring.gpg
        state: present
      become: true

    - name: Add Terraform repository into sources list
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release | lower }} main"
        state: present
      become: true

    - name: Update the repository cache and Install Terraform on Jenkins-Host-Server
      ansible.builtin.apt:
        name: terraform
        update_cache: yes
      become: true

  roles:
    - role: geerlingguy.ntp
    - role: geerlingguy.java
    - role: geerlingguy.docker
    - role: geerlingguy.git
    - role: geerlingguy.ansible
    - role: geerlingguy.jenkins

  tasks:

    - name: Modify user 'Jenkins' to add group 'docker'
      ansible.builtin.user:
        name: jenkins
        groups: docker
        append: yes
      become: true

    - name: Stop service Jenkins if started
      ansible.builtin.service:
        name: jenkins
        state: stopped
      become: true
      when: jk_restore_backup

    - name: Set /etc/environment (Environment variables) with "jk_os_environment" dictionary value list. 
      lineinfile:
        path: "/etc/environment"
        state: present
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value}}"
      with_dict: "{{ jk_os_environment }}"
      become: yes

    - name: Create /tmp/downloads directory
      ansible.builtin.file:
        state: directory
        path: /tmp/downloads
      become: true
      when: jk_restore_backup

    - name: Download the backup file
      copy:
        remote_src: false      
        src: "{{ jk_backup_host_folder }}/{{ jk_backup_tar_gz }}"
        dest: "/tmp/downloads/{{ jk_backup_tar_gz }}"
      become: true
      when: jk_restore_backup

    - name: Delete Jenkins directory
      ansible.builtin.file:
        state: absent
        path: "{{ jenkins_home }}"
      become: true
      when: jk_restore_backup

    - name: Recreate Jenkins directory
      ansible.builtin.file:
        state: directory
        path: "{{ jenkins_home }}"
      become: true
      when: jk_restore_backup

    - name: Extract old Jenkins backup into jenkins_home
      ansible.builtin.unarchive:
        remote_src: true
        src: "/tmp/downloads/{{ jk_backup_tar_gz }}"
        dest: "{{ jenkins_home }}/"
      become: true
      when: jk_restore_backup

    - name: Change ownership of the /var/lib/jenkins back to jenkins:jenkins
      file:
        state : directory
        recurse : yes
        path : "{{ jenkins_home }}"
        owner: jenkins
        group: jenkins
      become: true
      when: jk_restore_backup

    - name: Delete /tmp/downloads directory
      ansible.builtin.file:
        state: absent
        path: /tmp/downloads
      become: true
      when: jk_restore_backup
 
    - name: Get Jenkins API crumb
      ansible.builtin.uri:
        url: 'http://localhost:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
        user: '{{ jenkins_admin_username }}'
        password: '{{ jenkins_admin_password }}'
        method: GET
        force_basic_auth: true
        return_content: true
        register: crumb
        failed_when: crumb is failed

    - name: Create a new Jenkins API Access Token
      ansible.builtin.uri:
        url: "http://localhost:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/me/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken"
        user: '{{ jenkins_admin_username }}'
        password: '{{ jenkins_admin_password }}'
        method: POST
        body: "newTokenName=AccessToken001"
        headers:
          Jenkins-Crumb: "{{ crumb }}"
        force_basic_auth: true
        return_content: true
        register: jk_token_response
        failed_when: jenkins_token_response is failed

    - name: Extract the API Token fron JSON
      ansible.builtin.debug:
        msg: '{{ jk_token_response | community.general.json_query(".data.tokenValue") }}'
        register: jk_token

    - name: Replace Token in Environemnt Variables file, if it was added by dictionary from vars in previous steps.
      lineinfile: 
        path: '/etc/environment'
        regexp: '^JENKINS_API_TOKEN=.*$'
        line: 'JENKINS_API_TOKEN={{ jk_token }}'
        backrefs: true
